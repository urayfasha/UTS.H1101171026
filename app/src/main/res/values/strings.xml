<resources>
    <string name="app_name">UTS.H1101171026</string>
    <string name="link">LINK</string>
    <string name="syn">SYNTAX</string>
    <string name="deskripsi">Silahkan tekan salah satu button untuk membaca mengenai komponen yang ada pada aplikasi !</string>
    <string name="button1">Ini Button yang akan mengarahkan ke Komponen Aktivasi</string>
    <string name="button2">Ini Button yang akan mengarahkan ke Komponen Layanan</string>
    <string name="button3">Ini Button yang akan mengarahkan ke komponen Penerima Siaran</string>
    <string name="button4">Ini Button yang akan mengarahkan ke komponen Penyedia Materi</string>
    <string name="button5">Ini Button yang akan mengarahkan ke komponen Intent</string>
    <string name="txtbtn1">Aktivitas</string>
    <string name="txtbtn2">Layanan</string>
    <string name="txtbtn3">Penerima Siaran</string>
    <string name="txtbtn4">Penyedia Materi</string>
    <string name="txtbtn5">Intent</string>
    <string name="isiaktv1">Aktivitas adalah titik masuk untuk berinteraksi dengan pengguna. Ini mewakili satu layar dengan antarmuka pengguna. Misalnya, aplikasi email mungkin memiliki satu aktivitas yang menampilkan daftar email baru, aktivitas lain untuk menulis email, dan aktivitas satunya lagi untuk membaca email. Walaupun semua aktivitas bekerja sama untuk membentuk pengalaman pengguna yang kohesif dalam aplikasi email, masing-masing tidak saling bergantung. Karenanya, aplikasi berbeda bisa memulai salah satu aktivitas ini (jika aplikasi email mengizinkannya). Misalnya, aplikasi kamera bisa memulai aktivitas dalam aplikasi email yang membuat email baru agar pengguna bisa berbagi gambar. Aktivitas mempermudah interaksi penting berikut di antara sistem dan aplikasi:</string>
    <string name="isiaktv2">1. Tetap memantau apa yang penting bagi pengguna saat ini (apa yang ada di layar) untuk memastikan bahwa sistem tetap menjalankan proses yang menjadi host aktivitas.</string>
    <string name="isiaktv3">2. Memahami proses yang digunakan sebelumnya berisi sesuatu yang dapat dikembalikan pengguna (aktivitas yang dihentikan), jadi lebih memprioritaskan mempertahankan proses tersebut.</string>
    <string name="isiaktv4">3. Membantu menangani aplikasi menghentikan prosesnya sehingga pengguna dapat kembali ke aktivitas dengan status sebelumnya yang dipulihkan.</string>
    <string name="isiaktv5">4. Memberikan cara bagi aplikasi untuk menerapkan alur antar pengguna, dan bagi sistem untuk mengoordinasikan alur ini. (Contoh yang paling klasik sedang dibagikan di sini).</string>
    <string name="isiaktv6">Anda menerapkan aktivitas sebagai subclass dari class Activity. Untuk informasi selengkapnya tentang class Activity, lihat panduan developer Aktivitas.</string>
    <string name="isikom2">Layanan adalah titik masuk serbaguna untuk menjaga aplikasi tetap berjalan di latar belakang bagi semua jenis alasan. Ini adalah komponen yang berjalan di latar belakang untuk melakukan operasi yang berjalan lama atau untuk melakukan pekerjaan bagi proses jarak jauh. Layanan tidak menyediakan antarmuka pengguna. Misalnya, sebuah layanan bisa memutar musik di latar belakang sementara pengguna berada dalam aplikasi lain, atau layanan bisa menarik data lewat jaringan tanpa memblokir interaksi pengguna dengan aktivitas. Komponen lain, seperti aktivitas, bisa memulai layanan dan membiarkannya berjalan atau mengikat layanan untuk berinteraksi dengannya. Sebenarnya ada dua layanan semantik berbeda yang memberi tahu sistem tentang cara mengelola aplikasi: Layanan yang dimulai memberi tahu sistem agar tetap berjalan hingga pekerjaannya selesai. Hal ini bisa jadi untuk menyinkronkan beberapa data di latar belakang atau memutar musik meskipun setelah pengguna meninggalkan aplikasi tersebut.</string>
    <string name="isikom3">Penerima siaran adalah komponen yang memungkinkan sistem menyampaikan kejadian di luar alur pengguna regular, menjadikan aplikasi tersebut dapat merespons pengumuman siaran seluruh sistem. Oleh karena penerima siaran adalah entri yang didefinisikan dengan baik ke dalam aplikasi, sistem dapat mengirimkan siaran meskipun ke aplikasi yang saat ini tidak berjalan. Jadi, misalnya, suatu aplikasi dapat menjadwalkan alarm untuk mengirimkan notifikasi agar pengguna tahu tentang acara yang akan datang... dan dengan mengirimkan alarm tersebut ke Penerima Siaran aplikasi, aplikasi tersebut tidak perlu untuk tetap berjalan hingga alarm mati. Banyak siaran berasal dari sistemâ€”misalnya, siaran yang mengumumkan bahwa layar sudah dimatikan, baterai lemah, atau gambar sudah diambil. Aplikasi juga dapat mengawali siaranâ€”misalnya, untuk memberi tahu aplikasi lain bahwa beberapa data sudah didownload ke perangkat dan tersedia untuk digunakan. Walaupun penerima siaran tidak menampilkan antarmuka pengguna, penerima bisa membuat notifikasi bilah status untuk memberi tahu pengguna kapan kejadian siaran dilakukan. Meskipun penerima siaran umumnya cuma menjadi gerbang untuk komponen lain dan dimaksudkan untuk melakukan pekerjaan dalam jumlah sangat minim. Misalnya, mungkin dijadwalkan JobService melakukan beberapa pekerjaan berdasarkan acara dengan JobScheduler
Penerima siaran diimplementasikan sebagai subclass BroadcastReceiver dan setiap siaran dikirim sebagai objek Intent. Untuk informasi selengkapnya, lihat class BroadcastReceiver.</string>
    <string name="isikom4">Penyedia materi mengelola set data aplikasi secara bersama-sama, yang dapat Anda simpan di sistem file, di database SQLite, di web, atau di lokasi penyimpanan persisten lain yang dapat diakses aplikasi Anda. Melalui penyedia materi, aplikasi lain bisa melakukan kueri atau memodifikasi data jika penyedia materi mengizinkannya. Misalnya, sistem Android menyediakan penyedia materi yang mengelola informasi kontak pengguna. Karenanya, setiap aplikasi dengan izin yang sesuai bisa melakukan kueri mengenai bagian dari penyedia materi, seperti ContactsContract.Data, untuk membaca dan menulis informasi tentang orang tertentu. Aplikasi ini membujuk agar memikirkan penyedia konten sebagai abstraksi di database, karena terdapat banyak API dan dukungan dibuat untuk kasus umum tersebut. Namun demikian, penyedia konten memiliki beragam tujuan inti untuk perspektif desain-sistem. Bagi sistem, penyedia konten adalah titik masuk ke dalam suatu aplikasi untuk memublikasikan item data bernama, yang diidentifikasi oleh skema URI. Jadi sebuah aplikasi dapat memutuskan bagaimana ia ingin memetakan data yang ada di dalamnya ke ruang nama URI, membagikan URI tersebut ke entitas lain yang dapat menggunakannya guna mengakses data.</string>
    <string name="dalam_sebuah_pertandingan_sepakbola_rekan_satu_tim_mengoper_bola_di_lapangan_dengan_tujuan_untuk_memasukkannya_ke_gawang_lawan_bola_dioper_dari_penjaga_gawang_ke_pemain_bertahan_lalu_bola_sampai_ke_pemain_tengah_dan_jika_semua_berjalan_seperti_rencana_satu_penyerang_menyarangkannya_di_gawang_lawan_ini_mengasumsikan_penjaga_gawang_lawan_tidak_bisa_menghalau_bola_di_android_kemampuan_mengirim_pesan_dimungkinkan_dengan_objek_intent_dengan_bantuan_intent_komponen_android_bisa_meminta_fungsional_dari_komponen_android_lain_saat_kamu_membuka_aplikasi_instagram_di_handphonemu_dan_menggunakannya_untuk_mengambil_foto_kamu_menggunakan_intent_intent_juga_membantu_mengkomunikasikan_bagian_dari_sebuah_aplikasi_perpindahan_dari_satu_layar_aktifitas_ke_layar_lain_dimungkinkan_dengan_intent_kita_bisa_melihatnya_seperti_ini_semua_komponen_aplikasi_dan_layar_dari_perangkat_android_itu_terisolasi_satu_sama_lain_satu_satunya_cara_mereka_bisa_berkomunikasi_adalah_dengan_menggunakan_intent">Dalam sebuah pertandingan sepakbola, rekan satu tim mengoper bola di lapangan dengan tujuan untuk memasukkannya ke gawang lawan. Bola dioper dari penjaga gawang ke pemain bertahan. Lalu, bola sampai ke pemain tengah, dan jika semua berjalan seperti rencana, satu penyerang menyarangkannya di gawang lawan. Ini mengasumsikan penjaga gawang lawan tidak bisa menghalau bola. Di Android, kemampuan mengirim pesan dimungkinkan dengan objek Intent. Dengan bantuan intent, komponen Android bisa meminta fungsional dari komponen Android lain. Saat kamu membuka aplikasi Instagram di handphonemu dan menggunakannya untuk mengambil foto, kamu menggunakan intent. Intent juga membantu mengkomunikasikan bagian dari sebuah aplikasi; perpindahan dari satu layar (aktifitas) ke layar lain dimungkinkan dengan intent. Kita bisa melihatnya seperti ini: semua komponen (aplikasi dan layar) dari perangkat Android itu terisolasi satu sama lain. Satu-satunya cara mereka bisa berkomunikasi adalah dengan menggunakan intent.</string>

</resources>
